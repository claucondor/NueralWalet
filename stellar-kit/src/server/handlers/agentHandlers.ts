/**
 * Handlers para operaciones relacionadas con el agente
 */

import { Request, Response } from 'express';
import { AgentService } from '../../lib/services/agent.service';
import { supabase } from '../../lib/utils/supabase';
import { LLMService } from '../../lib/services/llm.service';
import { ChatPromptTemplate } from '@langchain/core/prompts';

/**
 * Procesa un mensaje enviado al agente
 */
export interface CustomToken {
  symbol: string;
  name: string;
  address: string;
  decimals: number;
}

export interface HistoryMessage {
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date | string;
}

export const processMessage = async (req: Request, res: Response) => {
  console.log('‚ö° [API] Iniciando processMessage con request:', {
    messageLength: req?.body?.text?.length || 0,
    hasKeys: !!req?.body?.stellar_key_first_half && !!req?.body?.stellarPublicKey,
    customTokensCount: req?.body?.customTokens?.length || 0,
    messageHistoryCount: req?.body?.messageHistory?.length || 0,
    timestamp: new Date().toISOString()
  });
  
  try {
    const { text, stellar_key_first_half, stellarPublicKey, customTokens, messageHistory } = req.body;
    
    if (!text || !stellar_key_first_half || !stellarPublicKey) {
      console.log('‚ùå [API] Error de validaci√≥n: campos requeridos faltantes');
      return res.status(400).json({
        success: false,
        error: 'Se requiere texto del mensaje, mitad de clave privada y clave p√∫blica de Stellar'
      });
    }
    
    if (customTokens && !Array.isArray(customTokens)) {
      console.log('‚ùå [API] Error de validaci√≥n: customTokens no es un array');
      return res.status(400).json({
        success: false,
        error: 'customTokens debe ser un array de objetos'
      });
    }
    
    // Validar estructura de cada token si existen
    if (customTokens && customTokens.length > 0) {
      const invalidTokens = customTokens.filter((token: CustomToken) => 
        !token.symbol || !token.name || !token.address || token.decimals === undefined
      );
      
      if (invalidTokens.length > 0) {
        console.log('‚ùå [API] Tokens inv√°lidos recibidos:', invalidTokens);
        return res.status(400).json({
          success: false,
          error: 'Los custom tokens deben tener symbol, name, address y decimals'
        });
      }
    }
    
    // Validar historial de mensajes si existe
    let validMessageHistory: HistoryMessage[] = [];
    if (messageHistory && Array.isArray(messageHistory)) {
      console.log(`‚úÖ [API] Historial de mensajes recibido: ${messageHistory.length} mensajes`);
      validMessageHistory = messageHistory
        .filter((msg: any) => msg && typeof msg.content === 'string' && ['user', 'bot'].includes(msg.sender))
        .slice(0, 10); // Limitar a 10 mensajes m√°ximo
    }
    
    console.log(`‚úÖ [API] Validaci√≥n completada para mensaje de ${text.length} caracteres`);
    
    // Buscar la otra mitad de la clave en Supabase
    console.log(`üîç [API] Buscando mitad de clave para direcci√≥n: ${stellarPublicKey}`);
    const { data, error } = await supabase
      .from('users')
      .select('stellar_key_half')
      .eq('address', stellarPublicKey)
      .single();
    
    if (error || !data?.stellar_key_half) {
      console.error('‚ùå [API] Error obteniendo la otra mitad de la clave:', error);
      return res.status(500).json({
        success: false,
        error: 'Error obteniendo la otra mitad de la clave'
      });
    }
    
    console.log('‚úÖ [API] Recuperada mitad de clave de Supabase correctamente');
    
    // Reconstruir la clave completa
    const fullPrivateKey = stellar_key_first_half + data.stellar_key_half;
    
    // Crear el contexto de conversaci√≥n para el an√°lisis de intenci√≥n
    let conversationContext = '';
    if (validMessageHistory.length > 0) {
      // Formateamos el historial para el LLM
      conversationContext = 'Historial de la conversaci√≥n:\n\n';
      validMessageHistory.forEach((msg: HistoryMessage) => {
        conversationContext += `${msg.sender === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}\n\n`;
      });
      
      conversationContext += 'Mensaje actual del usuario: ' + text;
      console.log(`üß† [API] Contexto de conversaci√≥n creado con ${validMessageHistory.length} mensajes anteriores`);
    }
    
    // Iniciar procesamiento en paralelo
    console.log('üîÑ [API] Iniciando an√°lisis de intenci√≥n del usuario...');
    console.time('analyzeUserIntent');
    const userIntentPromise = AgentService.analyzeUserIntent(
      text, 
      customTokens, 
      conversationContext || undefined
    );
    
    // Esperar a que se complete el an√°lisis de intenci√≥n
    const userIntent = await userIntentPromise;
    console.timeEnd('analyzeUserIntent');
    console.log(`‚úÖ [API] An√°lisis completado. Intenci√≥n detectada: ${userIntent.intentType} con confianza: ${userIntent.confidence}`);
    
    // Verificar si faltan par√°metros necesarios para la intenci√≥n
    if (userIntent.intentType === 'send_payment') {
      const missingParams = [];
      
      if (!userIntent.params.recipient && !userIntent.params.recipientEmail) {
        missingParams.push('destinatario');
      }
      
      if (!userIntent.params.amount) {
        missingParams.push('cantidad');
      }
      
      // Si faltan par√°metros importantes, devolver una respuesta solicitando la informaci√≥n
      if (missingParams.length > 0) {
        console.log(`‚ö†Ô∏è [API] Faltan par√°metros necesarios: ${missingParams.join(', ')}`);
        
        // Generar respuesta pidiendo la informaci√≥n faltante usando LLM
        const llm = LLMService.getLLM();
        const promptTemplate = ChatPromptTemplate.fromTemplate(`
          Eres un asistente financiero de una aplicaci√≥n de wallet.
          
          Mensaje original del usuario: {originalMessage}
          
          Informaci√≥n faltante: {missingParams}
          
          Genera una respuesta solicitando la informaci√≥n faltante de manera clara.
          Responde en el mismo idioma que el usuario utiliz√≥ en su mensaje.
          
          IMPORTANTE: Tu respuesta debe ser EXACTAMENTE el mensaje para el usuario, sin a√±adir frases introductorias, 
          sin comillas, sin explicaciones adicionales. Escribe como si t√∫ fueras directamente la aplicaci√≥n.
          
          NOTA: Para enviar dinero s√≥lo se puede utilizar una direcci√≥n Stellar o un correo electr√≥nico registrado.
        `);
        
        const chain = promptTemplate.pipe(llm);
        const result = await chain.invoke({
          originalMessage: text,
          missingParams: missingParams.join(', ')
        });
        
        const responseMessage = typeof result.content === 'string' ? result.content : JSON.stringify(result.content);
        
        return res.json({
          success: true,
          data: {
            intent: userIntent.intentType,
            confidence: userIntent.confidence,
            params: userIntent.params,
            suggestedResponse: responseMessage,
            needsMoreInfo: true,
            missingParams
          }
        });
      }
    }
    
    // Procesar la intenci√≥n del usuario si tiene suficiente confianza
    if (AgentService.hasConfidence(userIntent)) {
      console.log(`üîÑ [API] Procesando intenci√≥n ${userIntent.intentType} con par√°metros:`, userIntent.params);
      console.time('processIntent');
      
      // Ya no es necesario pasar los customTokens porque la informaci√≥n necesaria ya est√° en userIntent.params
      const processResult = await AgentService.processIntent(
        userIntent.intentType,
        userIntent.params,
        fullPrivateKey,
        stellarPublicKey,
        userIntent.originalMessage,
        userIntent.language // Pasar el idioma detectado al m√©todo processIntent
      );
      
      console.timeEnd('processIntent');
      console.log(`‚úÖ [API] Procesamiento completado. √âxito: ${processResult.success}`);
      
      // Devolver el resultado del procesamiento
      return res.json({
        success: processResult.success,
        data: {
          intent: userIntent.intentType,
          confidence: userIntent.confidence,
          params: userIntent.params,
          suggestedResponse: processResult.message,
          ...processResult.data && { transactionData: processResult.data }
        }
      });
    } else {
      console.log(`‚ÑπÔ∏è [API] Confianza insuficiente (${userIntent.confidence}). No se procesar√° la intenci√≥n.`);
      // Si no hay suficiente confianza, devolver solo la intenci√≥n detectada
      return res.json({
        success: true,
        data: {
          intent: userIntent.intentType,
          confidence: userIntent.confidence,
          params: userIntent.params,
          suggestedResponse: userIntent.suggestedResponse || 'No estoy seguro de entender tu solicitud. ¬øPodr√≠as ser m√°s espec√≠fico?'
        }
      });
    }
  } catch (error: any) {
    console.error('‚ùå [API] Error en processMessage:', error);
    console.error('‚ùå [API] Stack trace:', error.stack);
    
    // Usar LLM para generar un mensaje de error amigable
    console.log('üîÑ [API] Generando mensaje de error amigable...');
    const errorMessage = await generateErrorMessage(error.message || 'Error desconocido');
    
    res.status(500).json({
      success: false,
      error: errorMessage
    });
  }
};

/**
 * Genera un mensaje de error amigable utilizando LLM
 */
async function generateErrorMessage(errorDetails: string): Promise<string> {
  try {
    console.log('üîÑ [API] Iniciando generaci√≥n de mensaje de error con LLM');
    const llm = LLMService.getLLM();
    const result = await llm.invoke(
      `Eres un asistente financiero de una aplicaci√≥n de wallet.
      
      Genera un mensaje de error claro y √∫til en el idioma apropiado.
      Explica que ocurri√≥ un error y sugiere intentar m√°s tarde.
      
      Tu respuesta debe ser EXACTAMENTE el mensaje para el usuario, sin a√±adir frases introductorias, 
      sin comillas, sin explicaciones adicionales. Escribe como si t√∫ fueras directamente la aplicaci√≥n.
      
      Detalles t√©cnicos (solo para referencia): ${errorDetails}`
    );
    
    console.log('‚úÖ [API] Mensaje de error generado correctamente');
    return typeof result.content === 'string' ? result.content : JSON.stringify(result.content);
  } catch (e) {
    console.error('‚ùå [API] Error al generar mensaje con LLM:', e);
    // Si falla el LLM, devolver mensaje predeterminado
    return 'Lo siento, ocurri√≥ un error al procesar tu solicitud. Por favor, intenta m√°s tarde.';
  }
}

/**
 * Verifica el estado del agente
 */
export const getAgentStatus = async (req: Request, res: Response) => {
  try {
    // Por ahora, simplemente devolvemos un estado activo
    // En el futuro, aqu√≠ se implementar√° la verificaci√≥n real del estado del agente
    res.json({
      success: true,
      data: {
        status: 'active',
        message: 'El agente est√° funcionando correctamente'
      }
    });
  } catch (error: any) {
    res.status(500).json({
      success: false,
      error: error.message || 'Error obteniendo el estado del agente'
    });
  }
};